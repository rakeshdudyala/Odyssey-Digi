From 720523346b0aad773d26f482c5db81c27cd1cf7b Mon Sep 17 00:00:00 2001
From: Joel Winarske <joel.winarske@gmail.com>
Date: Tue, 8 Jul 2025 11:28:44 -0700
Subject: [PATCH] abseil clang compiler warnings

Upstream-Status: Inappropriate

Signed-off-by: Joel Winarske <joel.winarske@gmail.com>
---
 engine/src/flutter/third_party/abseil-cpp/absl/debugging/internal/stacktrace_riscv-inl.inc | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/engine/src/flutter/third_party/abseil-cpp/absl/debugging/internal/stacktrace_riscv-inl.inc b/engine/src/flutter/third_party/abseil-cpp/absl/debugging/internal/stacktrace_riscv-inl.inc
index 20183fa..be94560 100644
--- a/engine/src/flutter/third_party/abseil-cpp/absl/debugging/internal/stacktrace_riscv-inl.inc
+++ b/engine/src/flutter/third_party/abseil-cpp/absl/debugging/internal/stacktrace_riscv-inl.inc
@@ -44,7 +44,7 @@ template <typename T>
 static inline uintptr_t ComputeStackFrameSize(const T *low, const T *high) {
   const char *low_char_ptr = reinterpret_cast<const char *>(low);
   const char *high_char_ptr = reinterpret_cast<const char *>(high);
-  return low < high ? high_char_ptr - low_char_ptr : kUnknownFrameSize;
+  return low < high ? static_cast<uintptr_t>(high_char_ptr - low_char_ptr) : kUnknownFrameSize;
 }
 
 // Given a pointer to a stack frame, locate and return the calling stackframe,
@@ -151,7 +151,7 @@ static int UnwindImpl(void **result, int *sizes, int max_depth, int skip_count,
     } else {
       result[n] = return_address;
       if (IS_STACK_FRAMES) {
-        sizes[n] = ComputeStackFrameSize(frame_pointer, next_frame_pointer);
+        sizes[n] = static_cast<int>(ComputeStackFrameSize(frame_pointer, next_frame_pointer));
       }
       n++;
     }
-- 
2.50.0

