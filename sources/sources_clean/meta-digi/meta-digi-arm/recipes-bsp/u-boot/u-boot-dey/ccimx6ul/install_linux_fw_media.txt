#
# U-Boot script for installing Linux images created by Yocto from external media
# into the NAND
#

# Reset temp variables
install_abort=0
BASEFILENAME=0

# Determine U-Boot file to program basing on module variant
# If module_variant is unknown or not set, return error asking the user
if test "${module_variant}" = "0x02" || test "${module_variant}" = "0x03" || test "${module_variant}" = "0x06" || test "${module_variant}" = "0x09"; then
	setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##.imx;
elif test "${module_variant}" = "0x04" || test "${module_variant}" = "0x05" || test "${module_variant}" = "0x07"; then
	setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##1GB.imx;
elif test "${module_variant}" = "0x08" || test "${module_variant}" = "0x0a"; then
	setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##512MB.imx
fi

setenv INSTALL_MEDIA_INDEX ##INSTALL_MEDIA_INDEX##
setenv INSTALL_MEDIA ##INSTALL_MEDIA##

# Use 'test -n ...' because 'test -z ...' does not work well on old versions of
# u-boot when the checked value is empty.
if test -n "${INSTALL_UBOOT_FILENAME}"; then
	true;
else
	echo "";
	echo "[ERROR] Cannot determine U-Boot file for this module!";
	echo "";
	echo "1. Set variable 'INSTALL_UBOOT_FILENAME' depending on your ConnectCore 6UL variant:";
	echo "   - For a SOM with 1GB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##1GB.imx";
	echo "   - For a SOM with 512MB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##512MB.imx";
	echo "   - For a SOM with 256MB DDR3, run:";
	echo "     => setenv INSTALL_UBOOT_FILENAME u-boot-##SIGNED##-##MACHINE##.imx";
	echo "";
	echo "2. Run the install script again.";
	echo "";
	echo "Aborted";
	echo "";
	exit;
fi;

if test -z "${image-name}"; then
	setenv image-name ##DEFAULT_IMAGE_NAME##
fi
GRAPHICAL_IMAGES="##GRAPHICAL_IMAGES##"
for g in ${GRAPHICAL_IMAGES}; do
	if test "${image-name}" = "${g}"; then
		BASEFILENAME="${image-name}-##GRAPHICAL_BACKEND##"
	fi
done
if test "${BASEFILENAME}" = "0"; then
	BASEFILENAME="${image-name}"
fi
setenv INSTALL_LINUX_FILENAME ${BASEFILENAME}-##MACHINE##.boot.ubifs
setenv INSTALL_RECOVERY_FILENAME ${BASEFILENAME}-##MACHINE##.recovery.ubifs

# Check for presence of firmware files on the USB
FILES="${INSTALL_UBOOT_FILENAME} ${INSTALL_LINUX_FILENAME}"
if test "${dualboot}" != "yes"; then
	FILES="${FILES} ${INSTALL_RECOVERY_FILENAME}"
fi
for install_f in ${FILES}; do
	if test ! -e ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${install_f}; then
		echo "ERROR: Could not find file ${install_f}";
		install_abort=1;
	fi;
done
# Verify what kind of rootfs is going to be programmed
ROOTFS_FILENAME="${BASEFILENAME}-##MACHINE##.ubifs"
ROOTFS_FILENAME_SQFS="${BASEFILENAME}-##MACHINE##.squashfs"
if test -e ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${ROOTFS_FILENAME}; then
	setenv INSTALL_ROOTFS_FILENAME ${ROOTFS_FILENAME};
	setenv rootfstype;
elif test -e ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${ROOTFS_FILENAME_SQFS}; then
	setenv INSTALL_ROOTFS_FILENAME ${ROOTFS_FILENAME_SQFS};
	setenv rootfstype squashfs;
else
	echo "ERROR: Could not find any rootfs image";
	install_abort=1;
fi
if test "${install_abort}" = "1"; then
	echo "To install a different image, set variable 'image-name', e.g.:"
	echo "  => setenv image-name core-image-base"
	echo "Aborted.";
	exit;
fi

echo "############################################################"
echo "#           Linux firmware install from media              #"
echo "############################################################"
echo ""
echo " This process will erase your NAND and will install the following files"
echo " on the partitions of the NAND."
echo ""
echo "   PARTITION   FILENAME"
echo "   ---------   --------"
echo "   bootloader  ${INSTALL_UBOOT_FILENAME}"
if test "${dualboot}" = "yes"; then
	echo "   linux_a     ${INSTALL_LINUX_FILENAME}"
	if test "${install_dualboot}" = "yes"; then
		echo "   linux_b     ${INSTALL_LINUX_FILENAME}"
	fi
	echo "   rootfs_a    ${INSTALL_ROOTFS_FILENAME}"
	if test "${install_dualboot}" = "yes"; then
		echo "   rootfs_b    ${INSTALL_ROOTFS_FILENAME}"
	fi
else
	echo "   linux       ${INSTALL_LINUX_FILENAME}"
	echo "   recovery    ${INSTALL_RECOVERY_FILENAME}"
	echo "   rootfs      ${INSTALL_ROOTFS_FILENAME}"
	echo "   update      --format--"
fi
echo "   data        --format--"
echo ""
echo " Press CTRL+C now if you wish to abort or wait 10 seconds"
echo " to continue."

sleep 10
if test $? -eq 1; then
	echo "Aborted by user.";
	exit;
fi

# Skip user confirmation for U-Boot update
setenv forced_update 1

# Set bootdelay to zero so that firmware update is run immediately after
# the first reset.
setenv bootdelay 0

# Update U-Boot
echo ""
echo ""
echo ">> Installing U-Boot boot loader image ${INSTALL_UBOOT_FILENAME} (target will reset)"
echo ""
echo ""
update uboot ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_UBOOT_FILENAME}
if test $? -eq 1; then
	# Use old-style update with source file system argument
	update uboot ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} fat ${INSTALL_UBOOT_FILENAME}
	if test $? -eq 1; then
		echo "[ERROR] Failed to update U-Boot boot loader!";
		echo "";
		echo "Aborted.";
		exit;
	fi
fi

# Set 'bootcmd' to the second part of the script that will
#  - Reset environment to defaults
#  - Restore 'singlemtdsys' and 'dualboot' if previously set
#  - Run 'partition_nand_linux' script to re-partition the NAND if needed
#  - Save the environment
#  - If Dual Boot
#     - Update the system partitions: linux_a, linux_b, rootfs_a, rootfs_b
#     - Set bootlimit to 3
#  - If Normal Boot:
#     - Update the system partitions: linux, recovery, rootfs
#     - Format the 'update' partition
#     - Format the 'data' partition
setenv bootcmd "
	env default -a;
	setenv singlemtdsys ${singlemtdsys};
	setenv dualboot ${dualboot};
	setenv rootfstype ${rootfstype};
	setenv install_dualboot ${install_dualboot};
	run partition_nand_linux;
	saveenv;
	if test \"\$\{singlemtdsys\}\" = yes; then
		run ubivolscript;
	else
		force_erase=\"-e\";
	fi;
	if test "${INSTALL_MEDIA}" = "usb"; then
		usb start;
	fi;
	if test \"\$\{dualboot\}\" = yes; then
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux_a\";
		echo \"\";
		echo \"\";
		update linux_a ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_LINUX_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update linux_a!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		if test \"\$\{install_dualboot\}\" = yes; then
			echo \"\";
			echo \"\";
			echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux_b\";
			echo \"\";
			echo \"\";
			update linux_b ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_LINUX_FILENAME};
			if test \$? -eq 1; then
				echo \"[ERROR] Failed to update linux_b!\";
				echo \"\";
				echo \"Aborted.\";
				exit;
			fi;
		fi;
		if test "${INSTALL_MEDIA}" = "usb"; then
			usb reset;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs_a\";
		echo \"\";
		echo \"\";
		update rootfs_a ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_ROOTFS_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update rootfs_a partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		if test \"\$\{install_dualboot\}\" = yes; then
			echo \"\";
			echo \"\";
			echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs_b\";
			echo \"\";
			echo \"\";
			update rootfs_b ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_ROOTFS_FILENAME};
			if test \$? -eq 1; then
				echo \"[ERROR] Failed to update rootfs_b partition!\";
				echo \"\";
				echo \"Aborted.\";
				exit;
			fi;
		fi;
		setenv bootlimit 3;
	else
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_LINUX_FILENAME} on linux\";
		echo \"\";
		echo \"\";
		update linux ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_LINUX_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update linux!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_RECOVERY_FILENAME} on recovery\";
		echo \"\";
		echo \"\";
		update recovery ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_RECOVERY_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update recovery partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Installing file ${INSTALL_ROOTFS_FILENAME} on rootfs\";
		echo \"\";
		echo \"\";
		update rootfs ${INSTALL_MEDIA} ${INSTALL_MEDIA_INDEX} ${INSTALL_ROOTFS_FILENAME};
		if test \$? -eq 1; then
			echo \"[ERROR] Failed to update rootfs partition!\";
			echo \"\";
			echo \"Aborted.\";
			exit;
		fi;
		echo \"\";
	fi;
	if test \"\$\{singlemtdsys\}\" != yes; then
		if test \"\$\{dualboot\}\" != yes; then
			echo \"\";
			echo \"\";
			echo \">> Formatting 'update' partition\";
			echo \"\";
			echo \"\";
			nand erase.part update;
			if ubi part update; then
				ubi createvol update;
			fi;
		fi;
		echo \"\";
		echo \"\";
		echo \">> Formatting 'data' partition\";
		echo \"\";
		echo \"\";
		nand erase.part data;
		if ubi part data; then
			ubi createvol data;
		fi;
	fi;
	saveenv;
	echo \"\";
	echo \"\";
	echo \">> Firmware installation complete.\";
	echo \"\";
	echo \"\";
	sleep 1;
	bootcount reset;
	reset;
"

bootcount reset
saveenv
reset
