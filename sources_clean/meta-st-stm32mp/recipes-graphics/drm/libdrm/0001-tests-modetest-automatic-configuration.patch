From ee29da8d662e5eee3e43fe033329831e79001983 Mon Sep 17 00:00:00 2001
From: Christophe Priouzeau <christophe.priouzeau@foss.st.com>
Date: Mon, 18 Mar 2024 14:04:20 +0100
Subject: [PATCH 1/4] tests/modetest: automatic configuration
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Add a new option to set automatically a mode using default crtc,
encoder and mode.

Signed-off-by: Yannick Fertr√© <yannick.fertre@st.com>
Upstream-Status: Inappropriate
---
 tests/modetest/modetest.c | 53 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 51 insertions(+), 2 deletions(-)

diff --git a/tests/modetest/modetest.c b/tests/modetest/modetest.c
index d9e761e..0fb5f21 100644
--- a/tests/modetest/modetest.c
+++ b/tests/modetest/modetest.c
@@ -2128,7 +2128,7 @@ static void parse_fill_patterns(char *arg)
 
 static void usage(char *name)
 {
-	fprintf(stderr, "usage: %s [-acDdefMoPpsCvrw]\n", name);
+	fprintf(stderr, "usage: %s [-acDdefMoPpsCvrwA]\n", name);
 
 	fprintf(stderr, "\n Query options:\n\n");
 	fprintf(stderr, "\t-c\tlist connectors\n");
@@ -2155,6 +2155,7 @@ static void usage(char *name)
 	fprintf(stderr, "\t-d\tdrop master after mode set\n");
 	fprintf(stderr, "\t-M module\tuse the given driver\n");
 	fprintf(stderr, "\t-D device\tuse the given device\n");
+	fprintf(stderr, "\t-A Set a mode using default crtc, encoder and mode.\n");
 
 	fprintf(stderr, "\n\tDefault is to dump all info.\n");
 
@@ -2179,7 +2180,7 @@ static void usage(char *name)
 	exit(0);
 }
 
-static char optstr[] = "acdD:efF:M:P:ps:Cvrw:o:";
+static char optstr[] = "acdD:efF:M:P:ps:Cvrw:o:A";
 
 int main(int argc, char **argv)
 {
@@ -2203,6 +2204,7 @@ int main(int argc, char **argv)
 	unsigned int args = 0;
 	int ret;
 	char *dump_path = NULL;
+	bool auto_configuration = false;
 
 	memset(&dev, 0, sizeof dev);
 
@@ -2216,6 +2218,9 @@ int main(int argc, char **argv)
 			/* Preserve the default behaviour of dumping all information. */
 			args--;
 			break;
+		case 'A':
+			auto_configuration = true;
+			break;
 		case 'c':
 			connectors = 1;
 			break;
@@ -2305,6 +2310,9 @@ int main(int argc, char **argv)
 		}
 	}
 
+	if (auto_configuration)
+		use_atomic = false;
+
 	/* Dump all the details when no* arguments are provided. */
 	if (!args)
 		encoders = connectors = crtcs = planes = framebuffers = 1;
@@ -2364,6 +2372,47 @@ int main(int argc, char **argv)
 				return 1;
 			}
 
+#define connector_status_connected 1
+			if (auto_configuration)	{
+				struct resources *resources = dev.resources;
+				drmModeConnector *connector;
+				char auto_arg[32];
+				int j;
+
+				if (!resources->count_connectors ||
+				    !resources->count_crtcs) {
+					fprintf(stderr, "Cannot find connector or crtc\n");
+					return 1;
+				}
+
+				for (j = 0; j < resources->count_connectors; j++) {
+					connector = resources->connectors[j].connector;
+					if(connector->connection == connector_status_connected)
+						break;
+				}
+
+				if (!connector->count_modes) {
+					fprintf(stderr, "Cannot find mode\n");
+					return 1;
+				}
+
+				snprintf(auto_arg, sizeof(auto_arg) - 1, "%d@%d:%s-%d@%s\n",
+					 connector->connector_id, resources->crtcs[0].crtc->crtc_id,
+					 connector->modes[0].name, connector->modes[0].vrefresh,
+					 "XR24");
+
+				pipe_args = realloc(pipe_args, sizeof *pipe_args);
+				if (pipe_args == NULL) {
+					fprintf(stderr, "memory allocation failed\n");
+					return 2;
+				}
+				memset(&pipe_args[count], 0, sizeof(*pipe_args));
+
+				if (parse_connector(&pipe_args[count], auto_arg) < 0)
+					return 3;
+				/* fix to one plane without atomic */
+				count = 1;
+			}
 			if (set_preferred || count)
 				count = set_mode(&dev, &pipe_args, count);
 
-- 
2.34.1

